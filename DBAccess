//javac -cp C:\tomcat8.5\webapps\myapps\WEB-INF\classes DBAccess.java
package tera;

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;

public class DBAccess{
	public void insertTh(int icon, String name, String title, String description) throws SQLException{
		try{
			Class.forName("oracle.jdbc.driver.OracleDriver");

			//Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl",
				"info","pro");
			System.out.println("接続完了");
			
			//insert文
			String sql="INSERT INTO t10_board_thread VALUES(t10_test0.NEXTVAL,'"+title+"','"+name+"',"+icon+",DEFAULT,'"+description+"',DEFAULT)";
			//Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();
			//select文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			//insert文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			int in=st.executeUpdate(sql);
			//Oracleから切断する
			cn.close();

			System.out.println("切断完了");
		}catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
			throw new SQLException(e.getMessage(),e);
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public void insertRes(String tid, String res_name, int res_icon, String res_text) throws SQLException{
        try{
        	Class.forName("oracle.jdbc.driver.OracleDriver");
        //Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","info","pro");
            
        	int th_id=Integer.parseInt(tid);
        	
            String sql="INSERT INTO t10_board_res VALUES(t10_test1.NEXTVAL,"+th_id+",'"+res_name+"',"+res_icon+",'"+res_text+"',DEFAULT)";
            //Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();

            //insert文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			int in=st.executeUpdate(sql);

            //Oracleから切断する
            cn.close();
        }
    	catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}
    	catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
			throw new SQLException(e.getMessage(),e);
		}catch(Exception e){
			e.printStackTrace();
		}
    }
	public ArrayList<ThreadData> selectTh(ArrayList<ThreadData> list){
	try{
        	Class.forName("oracle.jdbc.driver.OracleDriver");
        	
            //Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","info","pro");
		
			String sql=" SELECT th_id, th_icon, th_name, th_title, th_description, TO_CHAR(th_date, 'YYYY-MM-DD HH24:MI'), th_view, ROW_NUMBER() OVER(ORDER BY th_id ASC) count FROM t10_board_thread ORDER BY th_id";
			
			//Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();

			//select文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			ResultSet rs=st.executeQuery(sql);
			list.clear();
			while (rs.next()) {
				ThreadData td = new ThreadData();
				//データを取得する
				BigDecimal _id =rs.getBigDecimal(1);
				int id=_id.intValue();
				td.setTh_id(id);
				BigDecimal _icon =rs.getBigDecimal(2);
				int icon=_icon.intValue();
				td.setTh_icon(icon);
				td.setTh_name(rs.getString(3));
				td.setTh_title(rs.getString(4));
				td.setTh_description(rs.getString(5));
				td.setTh_date(rs.getString(6));
				BigDecimal _view =rs.getBigDecimal(7);
				int view=_view.intValue();
				td.setTh_view(view);
				BigDecimal _count =rs.getBigDecimal(8);
				int count=_count.intValue();
				td.setCount(count);
				list.add(td);
			}
			
            
            //Oracleから切断する
            cn.close();
        }catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
    }
	
	public ArrayList<ThreadData> searchTh(String mes, ArrayList<ThreadData> list){
	try{
        	Class.forName("oracle.jdbc.driver.OracleDriver");
        	
            //Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","info","pro");
		
			String sql=" SELECT th_id, th_icon, th_name, th_title, th_description, TO_CHAR(th_date, 'YYYY-MM-DD HH24:MI'), th_view, ROW_NUMBER() OVER(ORDER BY th_id ASC) count FROM t10_board_thread WHERE th_title LIKE '%"+mes+"%' ORDER BY th_id";
			
			//Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();

			//select文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			ResultSet rs=st.executeQuery(sql);
			list.clear();
			while (rs.next()) {
				ThreadData td = new ThreadData();
				//データを取得する
				BigDecimal _id =rs.getBigDecimal(1);
				int id=_id.intValue();
				td.setTh_id(id);
				BigDecimal _icon =rs.getBigDecimal(2);
				int icon=_icon.intValue();
				td.setTh_icon(icon);
				td.setTh_name(rs.getString(3));
				td.setTh_title(rs.getString(4));
				td.setTh_description(rs.getString(5));
				td.setTh_date(rs.getString(6));
				BigDecimal _view =rs.getBigDecimal(7);
				int view=_view.intValue();
				td.setTh_view(view);
				BigDecimal _count =rs.getBigDecimal(8);
				int count=_count.intValue();
				td.setCount(count);
				list.add(td);
			}
			
            
            //Oracleから切断する
            cn.close();
        }catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
    }
	
	public ArrayList<ThreadData> selectThid(int tid, ArrayList<ThreadData> list){
	try{
        	Class.forName("oracle.jdbc.driver.OracleDriver");
        	
            //Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","info","pro");
		
			String sql=" SELECT th_id, th_icon, th_name, th_title, th_description, TO_CHAR(th_date, 'YYYY-MM-DD HH24:MI'), th_view FROM t10_board_thread WHERE th_id="+tid;
			
			//Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();

			//select文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			ResultSet rs=st.executeQuery(sql);
			list.clear();
			while (rs.next()) {
				ThreadData td = new ThreadData();
				//データを取得する
				BigDecimal _id =rs.getBigDecimal(1);
				int id=_id.intValue();
				td.setTh_id(id);
				BigDecimal _icon =rs.getBigDecimal(2);
				int icon=_icon.intValue();
				td.setTh_icon(icon);
				td.setTh_name(rs.getString(3));
				td.setTh_title(rs.getString(4));
				td.setTh_description(rs.getString(5));
				td.setTh_date(rs.getString(6));
				BigDecimal _view =rs.getBigDecimal(7);
				int view=_view.intValue();
				td.setTh_view(view);
				list.add(td);
			}
			
            
            //Oracleから切断する
            cn.close();
        }catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
    }
	
    public ArrayList<ResponceData> selectRes(String tid, ArrayList<ResponceData> list){
        try{
        	Class.forName("oracle.jdbc.driver.OracleDriver");
        	
            //Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","info","pro");
			
        	int th_id=Integer.parseInt(tid);
        	
			String sql=" SELECT res_id, res_name, res_icon, res_text, TO_CHAR(res_date, 'YYYY-MM-DD HH24:MI'), ROW_NUMBER() OVER(ORDER BY res_id ASC) count FROM t10_board_res WHERE th_id="+th_id+"ORDER BY res_id";

			//Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();

			//select文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			ResultSet rs=st.executeQuery(sql);
			list.clear();
			while (rs.next()) {
				ResponceData r = new ResponceData();
				//データを取得する
				BigDecimal _id =rs.getBigDecimal(1);
				int id=_id.intValue();
				r.setRes_id(id);
				r.setRes_name(rs.getString(2));
				BigDecimal _icon =rs.getBigDecimal(3);
				int icon=_icon.intValue();
				r.setRes_icon(icon);
				r.setRes_text(rs.getString(4));
				r.setRes_date(rs.getString(5));
				BigDecimal _count =rs.getBigDecimal(6);
				int count=_count.intValue();
				r.setCount(count);
				list.add(r);
			}
			
            
            //Oracleから切断する
            cn.close();
        }catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
    }
	
    public void updateTh(String tid){
		try{
        	Class.forName("oracle.jdbc.driver.OracleDriver");
        	//Oracleに接続する
			Connection cn=
				DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","info","pro");

        	int th_id=Integer.parseInt(tid);

			String sql=" SELECT th_view FROM t10_board_thread WHERE th_id="+th_id;

			//Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st=cn.createStatement();

			//select文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			ResultSet rs=st.executeQuery(sql);
			
			//データ(閲覧数)を取得する
			rs.next();
			BigDecimal _co =rs.getBigDecimal(1);
			int co=_co.intValue();
		    //閲覧数を1増やす
			co+=1;

            String sql2="UPDATE t10_board_thread SET th_view="+co+" WHERE th_id="+th_id;
			
		    //Statementインターフェイスを実装するクラスをインスタンス化する
			Statement st2=cn.createStatement();

            //update文を実行し
			//ResultSetインターフェイスを実装したクラスの
			//インスタンスが返る
			int in=st2.executeUpdate(sql2);

            //Oracleから切断する
            cn.close();
        }
    	catch(ClassNotFoundException e){
			e.printStackTrace();
			System.out.println("クラスがないみたい。");
		}
    	catch(SQLException e){
			e.printStackTrace();
			System.out.println("SQL関連の例外みたい。");
		}catch(Exception e){
			e.printStackTrace();
		}
    }

}

